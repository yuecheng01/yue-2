package com.yeucheng.yue.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yeucheng.yue.db.entity.Friend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND".
*/
public class FriendDao extends AbstractDao<Friend, String> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property PortraitUri = new Property(2, String.class, "portraitUri", false, "PORTRAIT_URI");
        public final static Property DisplayName = new Property(3, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property TimeStamp = new Property(4, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property NickNameSpelling = new Property(5, String.class, "nickNameSpelling", false, "NICK_NAME_SPELLING");
        public final static Property DisplayNameSpelling = new Property(6, String.class, "displayNameSpelling", false, "DISPLAY_NAME_SPELLING");
        public final static Property Letters = new Property(7, String.class, "letters", false, "LETTERS");
        public final static Property PhoneNumber = new Property(8, String.class, "phoneNumber", true, "PHONE_NUMBER");
    }


    public FriendDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"PORTRAIT_URI\" TEXT," + // 2: portraitUri
                "\"DISPLAY_NAME\" TEXT," + // 3: displayName
                "\"TIME_STAMP\" TEXT," + // 4: timeStamp
                "\"NICK_NAME_SPELLING\" TEXT," + // 5: nickNameSpelling
                "\"DISPLAY_NAME_SPELLING\" TEXT," + // 6: displayNameSpelling
                "\"LETTERS\" TEXT," + // 7: letters
                "\"PHONE_NUMBER\" TEXT PRIMARY KEY NOT NULL );"); // 8: phoneNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String portraitUri = entity.getPortraitUri();
        if (portraitUri != null) {
            stmt.bindString(3, portraitUri);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(4, displayName);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String nickNameSpelling = entity.getNickNameSpelling();
        if (nickNameSpelling != null) {
            stmt.bindString(6, nickNameSpelling);
        }
 
        String displayNameSpelling = entity.getDisplayNameSpelling();
        if (displayNameSpelling != null) {
            stmt.bindString(7, displayNameSpelling);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(8, letters);
        }
        stmt.bindString(9, entity.getPhoneNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String portraitUri = entity.getPortraitUri();
        if (portraitUri != null) {
            stmt.bindString(3, portraitUri);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(4, displayName);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String nickNameSpelling = entity.getNickNameSpelling();
        if (nickNameSpelling != null) {
            stmt.bindString(6, nickNameSpelling);
        }
 
        String displayNameSpelling = entity.getDisplayNameSpelling();
        if (displayNameSpelling != null) {
            stmt.bindString(7, displayNameSpelling);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(8, letters);
        }
        stmt.bindString(9, entity.getPhoneNumber());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 8);
    }    

    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // portraitUri
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // displayName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickNameSpelling
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // displayNameSpelling
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // letters
            cursor.getString(offset + 8) // phoneNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPortraitUri(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDisplayName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickNameSpelling(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDisplayNameSpelling(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLetters(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoneNumber(cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Friend entity, long rowId) {
        return entity.getPhoneNumber();
    }
    
    @Override
    public String getKey(Friend entity) {
        if(entity != null) {
            return entity.getPhoneNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Friend entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
